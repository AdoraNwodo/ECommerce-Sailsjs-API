'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _nodemailer = require('nodemailer');

var _nodemailer2 = _interopRequireDefault(_nodemailer);

var _nodemailerDirectTransport = require('nodemailer-direct-transport');

var _nodemailerDirectTransport2 = _interopRequireDefault(_nodemailerDirectTransport);

var _BaseMailer2 = require('./BaseMailer');

var _BaseMailer3 = _interopRequireDefault(_BaseMailer2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DirectMailer = function (_BaseMailer) {
  _inherits(DirectMailer, _BaseMailer);

  function DirectMailer(config) {
    _classCallCheck(this, DirectMailer);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(DirectMailer).call(this, config));

    _this.setProvider(_nodemailer2.default.createTransport((0, _nodemailerDirectTransport2.default)(_this.get('provider'))));
    return _this;
  }

  /**
   * Send mail
   * @param {Object} [_config] Additional configuration for overriding
   * @returns {Promise}
   */

  _createClass(DirectMailer, [{
    key: 'send',
    value: function send(_config) {
      var _this2 = this;

      var config = _lodash2.default.omit(_lodash2.default.merge({}, this.get(), _config), 'provider');

      return new Promise(function (resolve, reject) {
        _this2.getProvider().sendMail(config, function (error, result) {
          return error ? reject(error) : resolve(result);
        });
      });
    }
  }]);

  return DirectMailer;
}(_BaseMailer3.default);

exports.default = DirectMailer;
module.exports = exports['default'];